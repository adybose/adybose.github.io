
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>python on Aditya Bose</title>
   <link>https://adybose.github.io/tags/python/</link>
   <description>Recent content in python on Aditya Bose</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Copyright &amp;copy; 2021 - Aditya Bose</copyright>
   <lastBuildDate>Sat, 16 May 2020 13:56:48 +0530</lastBuildDate>
   
       <atom:link href="https://adybose.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>The Bulls Are Coming</title>
       <link>https://adybose.github.io/posts/16/</link>
       <pubDate>Tue, 24 Nov 2020 16:35:22 +0530</pubDate>
       
       <guid>https://adybose.github.io/posts/16/</guid>
       <description>&lt;p&gt;The price of Bitcoin (BTC) hit $19,469 on Coinbase today, reaching its highest point since its December 2017 peak of $19,891 on Bitfinex.&lt;/p&gt;&lt;p&gt;A few days back, on the twelfth anniversary of its whitepaper, Bitcoin&amp;rsquo;s price crossed the $14,000 mark, observing its highest price since January 2018, when the cryptocurrency market was crashing more than 80% in a year, and going into a multi-year bear market.&lt;/p&gt;&lt;p&gt;Even after the almost 60% Covid-19 crash earlier this March, the Bitcoin network&amp;rsquo;s hashrate increased as expected post the halvening in May, and the price recovered organically as expected in free markets.&lt;/p&gt;&lt;p&gt;Compare it to the stock markets, which after almost 30% crashes (which technically makes it a bear market), are at their all-time-highs, made possible only with the massive corporate  bailouts by national governments. While the Federal Reserve in the US printed $3 trillion (plus another $2 trillion on the way), the Bank of England likely printed towards £1 trillion, and many more around the world are following suit. To put it into perspective, the Fed printed $3.9 trillion between 2008 and 2014, including the 2008 financial crisis. They have already surpassed this mark within the last seven months alone, with more to come. According to the Institute of International Finance, Governments and companies took on &lt;a href=&#34;https://www.ft.com/content/18527e0c-6f02-4c70-93cb-c26c3680c8ad&#34;&gt;$15 trillion&lt;/a&gt; more borrowing in first nine months of 2020, taking the debt to GDP ratio to 365%, up from 320% at the end of 2019.&lt;/p&gt;&lt;p&gt;This is exactly why Bitcoin exists. But, it is more than just a hedge against inflation. Bitcoin is essentially a massive short position against the entire financial system. It has value because it is unlike any asset class that has ever been. It is a digital asset that exists in a peer-to-peer permissionless network. As long as there is someone willing to keep the network running, Bitcoin will survive. It is fungible like gold, but unforgably scarce coupled with diminishing returns with the halvening of mining reward every four years. This is what makes it so desirable, and creates these recurring market cycles.&lt;/p&gt;&lt;p&gt;However, this time the demand for Bitcoin isn&amp;rsquo;t coming from the retail market as much as it is coming from institutions. A quick search at Google Trends for the word “Bitcoin” would show that the interest today isn’t anywhere close to that of 2017.&lt;/p&gt;&lt;p&gt;In October, Microstrategy became the first publicly traded company to add roughly 38,250 Bitcoins to their balance sheet, with Square closely following in their footsteps with a purchase of 4,709. Similarly, Grayscale added 32,000 bitcoin to their portfolio in the last month alone, while CashApp generated $1.6 billion worth of revenue from their customers buying bitcoin in Q3 2020, and PayPal has announced that their customers will be able to buy bitcoin come 2021. With only about 27,000 bitcoins that can be mined each month, combined with the rapidly depleting Bitcoin reserves in exchanges, we can only expect the Bitcoin price to go up as more companies start accumulating Bitcoin.&lt;/p&gt;&lt;p&gt;There are many qualified &lt;a href=&#34;https://twitter.com/100trillionUSD&#34;&gt;experts&lt;/a&gt; and price &lt;a href=&#34;https://medium.com/@100trillionUSD/bitcoin-stock-to-flow-cross-asset-model-50d260feed12&#34;&gt;models&lt;/a&gt; predicting the future price of Bitcoin. Predicting or speculating on the Bitcoin price is beyond the scope of this post. My main motive for writing this piece was to appreciate the Bitcoin phenomena as it is. I am not a financial advisor, and this post is not financial advice. &lt;a href=&#34;https://github.com/bitcoin/bitcoin&#34;&gt;Bitcoin&lt;/a&gt; is an experimental digital currency. DYOR and don&amp;rsquo;t put more money than you can afford to lose.&lt;/p&gt;&lt;p&gt;Cheers!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Running A Bitcoin Full Node</title>
       <link>https://adybose.github.io/posts/15/</link>
       <pubDate>Sat, 14 Nov 2020 19:11:56 +0530</pubDate>
       
       <guid>https://adybose.github.io/posts/15/</guid>
       <description>&lt;p&gt;The previous post was a brief introduction on Bitcoin and full nodes. This post will cover how to set up a full node on your system.&lt;/p&gt;&lt;p&gt;Running your own Bitcoin full node means that you configured a computer with the Bitcoin Core software and have a full copy of the entire Blockchain database on it.&lt;/p&gt;&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;&lt;p&gt;Bitcoin Core requires a one-time download of about 350GB of data plus a further 5-10GB per month. To run a full node, you will need a system that meets the following requirements:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A desktop or a laptop computer running Windows, MacOS, or Linux&lt;/li&gt;&lt;li&gt;At least 2 GB of RAM&lt;/li&gt;&lt;li&gt;At least 500 GB of free disk space, with a minimum read/write speed of 100 MB/s&lt;/li&gt;&lt;li&gt;An unmetered broadband/fiber internet connection with high upload speed and limit&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In this post, we shall look into the process of installing a full node on a Linux machine from a pre-built binary version downloaded from the Bitcoin Core download page &lt;a href=&#34;https://bitcoincore.org/en/download/&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://bitcoin.org/en/download&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;At the time of writing this post, the latest version is &lt;code&gt;0.20.1&lt;/code&gt;. Click the &lt;code&gt;Linux (tgz)&lt;/code&gt; link to download the file.&lt;/p&gt;&lt;p&gt;It is highly recommended to verify your download by verifying that its checksum is in &lt;a href=&#34;https://bitcoincore.org/bin/bitcoin-core-0.20.1/SHA256SUMS.asc&#34;&gt;this&lt;/a&gt; list of cryptographic checksums. Download this checksums file in the same directory as the downloaded bitcoin binary tgz file, and from this directory, run the following command in the terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sha256sum --ignore-missing --check SHA256SUMS.asc&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where &lt;code&gt;SHA256SUMS.asc&lt;/code&gt; is the downloaded checksums file.&lt;/p&gt;&lt;p&gt;You should see a line that shows &lt;code&gt;OK&lt;/code&gt; against the name of the downloaded file like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;bitcoin-0.20.1-x86_64-linux-gnu.tar.gz: OK&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, obtain a copy of the &lt;strong&gt;&lt;em&gt;release signing key&lt;/em&gt;&lt;/strong&gt; by running the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 01EA5486DE18A882D4C2684590C8019E36C2E964&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output of the command above should say that one key was imported like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gpg --verify SHA256SUMS.asc&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, verify that the checksums file is PGP signed by the release signing key:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gpg --verify SHA256SUMS.asc&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output from the verify command should contain a line that starts with:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gpg: Good signature&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and a complete line:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Primary key fingerprint: 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, if other people you trust can confirm that the key fingerprint printed above belongs to the Bitcoin Core Project&amp;rsquo;s release signing key, you have essentially verified your download. Now, you can proceed with installing Bitcoin on your system.&lt;/p&gt;&lt;p&gt;First, extract the downloaded Bitcoin GZipped Tar File with the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tar xzf bitcoin-0.20.1-x86_64-linux-gnu.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create the directory &lt;strong&gt;bitcoin-0.20.1/&lt;/strong&gt; within your current working directory. Then, install the contents of its &lt;strong&gt;bin/&lt;/strong&gt; subdirectory into the &lt;strong&gt;/usr/local/bin&lt;/strong&gt; directory of your system using the the &lt;code&gt;install&lt;/code&gt; command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo install -m 0755 -o root -g root -t /usr/local/bin bitcoin-0.20.1/bin/*&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Navigate to the &lt;strong&gt;/usr/local/bin/&lt;/strong&gt; directory and run the &lt;code&gt;ls&lt;/code&gt; command. You should see the &lt;code&gt;bitcoin-cli&lt;/code&gt;, &lt;code&gt;bitcoind&lt;/code&gt;, and &lt;code&gt;bitcoin-qt&lt;/code&gt; executables.&lt;/p&gt;&lt;p&gt;To run Bitcoin Core GUI, simply run &lt;code&gt;bitcoin-qt&lt;/code&gt; from the terminal (make sure that the /usr/local/bin/ directory is in your PATH, which is usually true). If all the required libraries are installed, Bitcoin Core GUI will start and you will see a welcome screen like below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adbose/assets/master/en-bitcoin-qt-welcome.png&#34; alt=&#34;Bitcoin Core GUI&#34;&gt;&lt;/p&gt;&lt;p&gt;You can specify the directory where Bitcoin Core will download and store a copy of the Bitcoin blockchain by choosing the default data directory, or by creating a custom data directory. This is also where the wallet will be stored.&lt;/p&gt;&lt;p&gt;Once done, Bitcoin Core GUI will begin downloading the blockchain, a process which is known as Initial Block Download (IBD). This step will take at least several days for a first-time download, during which Bitcoin Core will use a significant part of your connection bandwidth. You can pause the IBD anytime by closing the Bitcoin Core application, which will resume from the last download point the next time you start it.&lt;/p&gt;&lt;p&gt;After download is complete, you may use Bitcoin Core as your wallet or you can just let it run to help support the Bitcoin network. You now have a full node running at port 8333.&lt;/p&gt;&lt;p&gt;For a more exhaustive read, check out the official docs for Running a full node &lt;a href=&#34;https://bitcoin.org/en/full-node&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In the next part of this series, we will look at how you can run a Lightning Node along with your full node.&lt;/p&gt;&lt;p&gt;Stay tuned!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>An Introduction To Bitcoin</title>
       <link>https://adybose.github.io/posts/14/</link>
       <pubDate>Sat, 31 Oct 2020 21:34:44 +0530</pubDate>
       
       <guid>https://adybose.github.io/posts/14/</guid>
       <description>&lt;p&gt;In 2020, there would hardly be a person in tech who would not have heard of Bitcoin. A general idea which people mostly have is that it is a form of digital money which holds some value and which one can own or exchange for other goods. While this is mostly true, there is much more to Bitcoin than that. In this post, I shall try to give a simple introduction of the technology behind Bitcoin and how anyone can be a part of it and make it more robust.&lt;/p&gt;&lt;p&gt;According to its whitepaper, which was released on this date twelve years ago by the genius pseudonymous Satoshi Nakamoto, Bitcoin is &amp;ldquo;A Peer-to-Peer Electronic Cash System&amp;rdquo; which would allow online payments to be sent directly from one party to another without going through a financial institution.&lt;/p&gt;&lt;p&gt;Such a system must address the double-spending problem without relying on a trusted central authority. The Bitcoin whitepaper proposes a solution using a peer-to-peer network which timestamps transactions into an ongoing chain of hash-based proof-of-work, forming a record that cannot be changed without redoing the proof-of-work.&lt;/p&gt;&lt;p&gt;This record, with the computational proof of the chronological order of transactions, is called a &lt;strong&gt;&lt;em&gt;blockchain&lt;/em&gt;&lt;/strong&gt;, and the process of adding these transactions into the longest chain representing the greatest proof-of-work, is called &lt;strong&gt;&lt;em&gt;mining&lt;/em&gt;&lt;/strong&gt;. It is this process of mining that creates new Bitcoin as &amp;ldquo;block reward&amp;rdquo; for successfully adding a new block of transactions to the blockchain.&lt;/p&gt;&lt;p&gt;The Bitcoin network is a collection of computers called &lt;strong&gt;&lt;em&gt;nodes&lt;/em&gt;&lt;/strong&gt; running the &lt;strong&gt;Bitcoin Core&lt;/strong&gt; software. Nodes that collect transactions into blocks and add it to the blockchain along with a proof-of-work, are called &lt;strong&gt;&lt;em&gt;miners&lt;/em&gt;&lt;/strong&gt;, while nodes that fully validate transactions and blocks and enforce the rules of the network are called &lt;strong&gt;&lt;em&gt;full nodes&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;The supply of Bitcoin is finite (unlike Fiat currencies), at close to 21 million. With the reward getting halved every 210,000 blocks (which is approximately every 4 years), mining keeps getting more expensive and resource intensive, which over time can only be done by large companies having a lot of hash power. However, running a full node is accessible to anyone. In fact, for the Bitcoin network to operate securely, it requires many additional full nodes to ensure that miners are following the consensus rules. Running a full node thus helps the Bitcoin network become more decentralised and robust.&lt;/p&gt;&lt;p&gt;Full nodes work by accepting transactions and blocks from other full nodes, validating those transactions and blocks, and then relaying them to further full nodes. By running your own full node, you don’t have to trust anyone to keep the network honest — you do it yourself. If a transaction breaks consensus rules, your node will automatically reject it and it won’t be carried out, even if everyone else accepts the transaction. Having your own full node also means you can be sure that your transactions will be broadcast to the network, unlike running a lightweight client, where you have to rely on someone else’s full node to do that for you.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If bitcoin is digital gold, then a full node wallet is your own personal goldsmith who checks for you that received payments are genuine. - &lt;em&gt;Chris Belcher&lt;/em&gt;, creator of Electrum Personal Server.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Full nodes are therefore the cornerstone of Bitcoin — they help keep the network decentralized and protect the protocol’s consensus rules. Anyone who truly wants to be a part of Bitcoin&amp;rsquo;s success should run a full node. So, how can you run your own Bitcoin full node?&lt;/p&gt;&lt;p&gt;In the next part, we will dive into just that, after which you too can become a part of Bitcoin!&lt;/p&gt;&lt;p&gt;Stay tuned!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Virtual Environments In Python</title>
       <link>https://adybose.github.io/posts/09/</link>
       <pubDate>Sat, 08 Aug 2020 21:17:11 +0530</pubDate>
       
       <guid>https://adybose.github.io/posts/09/</guid>
       <description>&lt;p&gt;Often times, while developing applications in Python, one needs to install some external packages or dependencies.&lt;/p&gt;&lt;p&gt;Normally, third party packages installed using &lt;strong&gt;&lt;em&gt;easy_install&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;pip&lt;/em&gt;&lt;/strong&gt; are typically placed in one of the directories pointed to by the &lt;code&gt;site.getsitepackages()&lt;/code&gt; function. For example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import site&amp;gt;&amp;gt;&amp;gt; site.getsitepackages()[  &#39;/System/Library/Frameworks/Python.framework/Versions/3.5/Extras/lib/python&#39;,  &#39;/Library/Python/3.5/site-packages&#39;]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default, every project on your system will use these same directories to store and retrieve &lt;strong&gt;&lt;em&gt;site packages&lt;/em&gt;&lt;/strong&gt; (third party libraries). But this becomes a problem if different projects use different versions of the same dependency which Python can&amp;rsquo;t differntiate between in the &lt;em&gt;site-packages/&lt;/em&gt; directory&amp;hellip;. breaking code.&lt;/p&gt;&lt;p&gt;This is where virtual environments come into picture, which provide a way to separate different Python environments for different projects.&lt;/p&gt;&lt;h2 id=&#34;creating-a-virtual-environment&#34;&gt;Creating a virtual environment&lt;/h2&gt;&lt;p&gt;Creating a virtual environment creates a new path for the Python executable as well as a copy of the Python version containing a &lt;em&gt;site-packages&lt;/em&gt; folder where each dependency is installed.Activating it sets up your shell to use the environment’s Python executable and its site-packages by default.&lt;/p&gt;&lt;p&gt;Versions of Python 3.6 and above come with the &lt;strong&gt;venv&lt;/strong&gt; module to create virtual environments. For example, running&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ python3 -m venv env&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;creates a new virtual environment with the name &lt;em&gt;env&lt;/em&gt; in the current working directory which would contain all the executable scripts along with the &lt;em&gt;site-packages&lt;/em&gt; directory where external dependencies get installed.&lt;/p&gt;&lt;p&gt;For Python2, we can create virtual environments using &lt;strong&gt;virtualenv&lt;/strong&gt;. Before using it, virtualenv should first be installed. We can install using &lt;em&gt;pip&lt;/em&gt; like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ pip install virtualenv&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;after which we can create virtual environments like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ virtualenv env&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To activate the virtual environment run the &lt;code&gt;activate&lt;/code&gt; script from the terminal. In *nix systems, from the directory containing the environment variable directory, run:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ source env/bin/activate(env) $&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This would modify the shell prompt with a prefix like above, indicating the virtual environment is currently active. This means the python executable will only use the environment’s packages and settings, and all external Python packages would be installed in that site-packages directory of the virtual environment.&lt;/p&gt;&lt;p&gt;Now, you can comfortable work on your own isolated Python environment without worrying about breaking code in other projects.&lt;/p&gt;&lt;p&gt;To deactivate the virtual environment, simply run:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(env) $ deactivate$&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This would also remove the prefix indicating the virtual environment has been deactivated.&lt;/p&gt;&lt;h2 id=&#34;managing-virtual-environments-with-virtualenvwrapper&#34;&gt;Managing virtual environments with &lt;code&gt;virtualenvwrapper&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;As the number of virtual environments in the system increases, it can become difficult to remember and manage them. This is where &lt;strong&gt;virtualenvwrapper&lt;/strong&gt; comes in the picture. It&amp;rsquo;s just some wrapper scripts around the main &lt;em&gt;virtualenv&lt;/em&gt; tool which provides a few features like organizing all virtual environments in one location, commands to create, remove and switch between environments.&lt;/p&gt;&lt;p&gt;To install using &lt;em&gt;pip&lt;/em&gt;, run:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ pip install virtualenv&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once installed, activate its shell functions by running source on the installed &lt;em&gt;virtualenvwrapper.sh&lt;/em&gt; script.&lt;/p&gt;&lt;p&gt;For that, first find the location of &lt;em&gt;virtualenvwrapper.sh&lt;/em&gt; by running:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ which virtualenvwrapper.sh/usr/local/bin/virtualenvwrapper.sh&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which should return the path of the virtualenvwrapper.sh script like above.&lt;/p&gt;&lt;p&gt;Using that path, add the following three lines to your shell’s startup file. If you’re using the Bash shell, you would place these lines in either the &lt;em&gt;~/.bashrc&lt;/em&gt; file or the &lt;em&gt;~/.profile&lt;/em&gt; file like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;export WORKON_HOME=$HOME/.virtualenvs   # Optionalexport PROJECT_HOME=$HOME/projects      # Optionalsource /usr/local/bin/virtualenvwrapper.sh&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and reload the startup file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ source ~/.bashrc&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There should now be a directory located at &lt;em&gt;$WORKON_HOME&lt;/em&gt; that contains all of the virtualenvwrapper data/files.&lt;/p&gt;&lt;p&gt;Now, to create a new virtual environment, simply run:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ mkvirtualenv env(env) $&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create and activate a new environment in the directory located at &lt;em&gt;$WORKON_HOME&lt;/em&gt;, where all virtualenvwrapper environments are stored.&lt;/p&gt;&lt;p&gt;If you have many environments to choose from, you can list them all with the workon function:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ workonenvenv1env2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And activate a specific virtual environment like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ workon env2(env2) $&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;using-different-python-versions&#34;&gt;Using different Python versions&lt;/h2&gt;&lt;p&gt;Sometimes, we want to switch between different versions of Python itself. For that, we have &lt;strong&gt;&lt;em&gt;pyenv&lt;/em&gt;&lt;/strong&gt; which we can install in *nix systems with Homebrew like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ brew install pyenv&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or using pyenv-installer like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once installed, we can use it to install specific version of Python, use them for global or local use. Using the pyenv local command, to set the Python version for a specific project or directory by storing the version number in a .local-version file.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>An Introduction To Node.js</title>
       <link>https://adybose.github.io/posts/08/</link>
       <pubDate>Fri, 17 Jul 2020 11:39:54 +0530</pubDate>
       
       <guid>https://adybose.github.io/posts/08/</guid>
       <description>&lt;p&gt;Node.js is an open-source and cross-platform JavaScript runtime environment developed by Ryan Dahl in 2009. Built on Google Chrome&amp;rsquo;s V8 JavaScript engine, node.js allows developers to use JavaScript in the backend to create server-side applications.&lt;/p&gt;&lt;p&gt;Node.js uses a light-weight single-threaded event event loop architecture which runs applications in an asynchronous, event-driven, non-blocking I/O model. This makes it perfect for developing highly scalable &lt;em&gt;data-intensive&lt;/em&gt; real-time applications capable of handling multiple concurrent clients.However, because of its single-threaded architecture, node.js is not suitable for CPU-intensive applications.&lt;/p&gt;&lt;h2 id=&#34;installing-nodejs&#34;&gt;Installing Node.js&lt;/h2&gt;&lt;p&gt;In this post, we will focus on installing Node.js on a system running Ubuntu.&lt;/p&gt;&lt;p&gt;Node.js is available in the Ubuntu repository and we can easily install it using the &lt;code&gt;apt&lt;/code&gt; package manager.&lt;/p&gt;&lt;p&gt;First, refresh your local package index by running:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ sudo apt update&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, install Node.js:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ sudo apt install nodejs&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check that the installation was successful by running &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;nodejs&lt;/code&gt; in the terminal. It should start up a new node shell in a new line like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can start coding right from the shell. Example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; console.log(&amp;quot;hello node!&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Output:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;hello node!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also check the version by running &lt;code&gt;node -v&lt;/code&gt; or &lt;code&gt;nodejs -v&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;It is recommended to also install Node Package Manager(NPM) with Node.js. NPM is an open source library of Node.js packages.&lt;/p&gt;&lt;p&gt;To install NPM, run the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ sudo apt install npm&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again, check that the installation was successful by running &lt;code&gt;npm -v&lt;/code&gt; or &lt;code&gt;npm --version&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Once installed, you can use NPM to installed Node.js packages like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ npm install express&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can uninstall a node package using the npm uninstall command. Example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ npm uninstall express&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To install both Node.js and NPM, for a specific version of &lt;em&gt;node&lt;/em&gt;, we can use a Node.js PPA (personal packaging archive) maintained by NodeSource.&lt;/p&gt;&lt;p&gt;We can use &lt;code&gt;curl&lt;/code&gt; to add the particular Node.js PPA to the system like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If &lt;code&gt;curl&lt;/code&gt; is not installed on your system, first install it using:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ sudo apt install curl&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, you can install the Node.js package using the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ sudo apt install nodejs&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The nodejs package contains both the node and npm binaries. Verify that node and npm are installed using the commands &lt;code&gt;node -v&lt;/code&gt; and &lt;code&gt;npm -v&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Another very important way to install a specific version of node.js, is using the Node Version Manager (NVM).&lt;/p&gt;&lt;p&gt;Visit the NVM GitHub repository, and from the &lt;a href=&#34;https://github.com/nvm-sh/nvm#installing-and-updating&#34;&gt; section&lt;/a&gt; page and copy either the &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt; command to download and install the nvm script:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.36.0/install.sh | bash&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.36.0/install.sh | bash&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(Note: Do not run these scripts with &lt;code&gt;sudo&lt;/code&gt; as it will enable nvm for the root user.)&lt;/p&gt;&lt;p&gt;Running the scripts will clone the project’s repository from Github to the &lt;code&gt;~/.nvm/&lt;/code&gt; directory. You will have to close and reopen your terminal to start using nvm.&lt;/p&gt;&lt;p&gt;To check that nvm is installed, type &lt;code&gt;nvm --version&lt;/code&gt;. If you get a version number back like &lt;code&gt;0.36.0&lt;/code&gt;, then you know nvm was successfully installed.&lt;/p&gt;&lt;p&gt;Now, you can install a specific version of Node.js, say, &lt;code&gt;14.5.0&lt;/code&gt; by simply running:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ nvm install 14.5.0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To install the latest LTS (long term support) version, use the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ nvm install --lts&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can list the installed Node.js versions with the command &lt;code&gt;nvm list&lt;/code&gt; or &lt;code&gt;nvm ls&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;If you want to change the currently active version, run &lt;code&gt;nvm use&lt;/code&gt; along with the version you want to switch to. Example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ nvm use 12.16.3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To change the default Node.js version, run the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ nvm alias default 14.5.0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s it. Now you have all that you need to start using Node.js to make backend applications.&lt;/p&gt;&lt;h2 id=&#34;creating-a-basic-http-server&#34;&gt;Creating a basic HTTP server&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s create a basic server in Node.js. Create a file with the name &lt;em&gt;server.js&lt;/em&gt; and add the following code in it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;const http = require(&#39;http&#39;);const hostname = &amp;quot;127.0.0.1&amp;quot;;const port = 3000;http.createServer(function(req, res) {    res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});    res.end(&#39;Hello Node!\n&#39;);}).listen(port, hostname, ()=&amp;gt;{    console.log(`Server is running at http://${hostname}:${port}/`);});&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Save the file, and from the terminal in the directory containing the file, run:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ node server.js&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should see the output below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Server is running at http://127.0.0.1:3000/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we open the address in the browser, we should see the &lt;code&gt;Hello Node!&lt;/code&gt; message.&lt;/p&gt;&lt;p&gt;Now, let&amp;rsquo;s create the same basic web server, but using Express.&lt;/p&gt;&lt;h2 id=&#34;basic-express-server-in-nodejs&#34;&gt;Basic Express Server in Node.js&lt;/h2&gt;&lt;p&gt;Express is a web application framework for Node.js that allows you to spin up robust APIs and web servers in a much easier and cleaner way.&lt;/p&gt;&lt;p&gt;Simply install it via npm as you would with any other package.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ npm install express --save&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With &lt;code&gt;express&lt;/code&gt; installed, create a file with the name &lt;em&gt;server.js&lt;/em&gt; and add the following code in it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;const express = require(&#39;express&#39;);const app = express();app.get(&#39;/&#39;, (req, res) =&amp;gt; {    res.send(&#39;Hello Express!&#39;);});app.listen(3000, () =&amp;gt; console.log(&#39;Server is running at port 3000&#39;));&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we open the address in the browser, this time we should see the message &lt;code&gt;Hello Express!&lt;/code&gt;.&lt;/p&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;That&amp;rsquo;s all I have for now. In this post, we covered quite a few concepts about Node.js, starting from installation using various methods, installing and removing packages, and usage in a sample web server application.&lt;/p&gt;&lt;p&gt;You can read more about Node.js from their official docs &lt;a href=&#34;https://nodejs.org/en/docs/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Reset Forgotten Login Keyring In Ubuntu</title>
       <link>https://adybose.github.io/posts/07/</link>
       <pubDate>Sat, 04 Jul 2020 00:49:48 +0530</pubDate>
       
       <guid>https://adybose.github.io/posts/07/</guid>
       <description>&lt;p&gt;If you&amp;rsquo;ve ever changed your Ubuntu login password, you should also change your keyring password. If you don’t do it, it might display the following dialog when you do certain things on your system like connecting to wireless, starting up your browser, etc.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adbose/assets/master/unlock-login-keyring.png&#34; alt=&#34;Unlock Login Keyring&#34;&gt;&lt;/p&gt;&lt;p&gt;Ever since I installed Chrome a few weeks ago, and saved the login passwords of some sites, I&amp;rsquo;ve been seeing this popup on my screen whenever I open Chrome. The popup disappears though, after clicking on Cancel several times. Since I mostly use Firefox to browse the Internet which does not have such a problem, I kept on procrastinating fixing the issue.This week, I finally decided to investigate the reason why this might be happening, and document the steps I took to fix it.&lt;/p&gt;&lt;p&gt;The popup to unlock the login keyring appears in Chrome because it uses the Gnome keyring to save all the login and password for websites.&lt;/p&gt;&lt;p&gt;The easiest way to reset the login keyring is by going to the keyrings directory in the &lt;code&gt;.local&lt;/code&gt; inside your home directory, and removing the &lt;code&gt;login.keyring&lt;/code&gt;. You can do it from the console like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ rm ~/.local/share/keyrings/login.keyring&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This would reset everything including your keyring password and all passwords for websites saved on Chrome, and you can create a new keyring&lt;/p&gt;&lt;p&gt;If you want to only reset the keyring password, but keep the old passwords saved in the keyring, you need to first make a backup of the keyring like shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cd ~/.local/share/keyrings/$ cp login.keyring login.keyring.backup&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, delete the &lt;code&gt;login.keyring&lt;/code&gt; file by running:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ rm ~/.local/share/keyrings/login.keyring&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, create a new keyring file from Gnome Keyring with the name &lt;code&gt;login&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Finally, replace the new keyring file with the backup of the old keyring file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cd ~/.local/share/keyrings/$ mv login.keyring.backup login.keyring&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s it! This will solve the problem of the login keyring unlock popup appearing because of the Ubuntu login and keyring login password mismatch.&lt;/p&gt;&lt;p&gt;If you want to read more, there is a popular &lt;a href=&#34;https://askubuntu.com/questions/65281/how-to-recover-reset-forgotten-gnome-keyring-password&#34;&gt;question&lt;/a&gt; on Ask Ubuntu which has been answered by several people.&lt;/p&gt;&lt;p&gt;See you again in another one!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Blogging With Hugo</title>
       <link>https://adybose.github.io/posts/06/</link>
       <pubDate>Fri, 19 Jun 2020 11:39:54 +0530</pubDate>
       
       <guid>https://adybose.github.io/posts/06/</guid>
       <description>&lt;p&gt;This blog is hosted for free on &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;. But it is built using another service called Hugo. If you look at the site footer, you should find a link to their project website.&lt;/p&gt;&lt;p&gt;In their website, they say they are the world&amp;rsquo;s fastest framework for building websites. It is a static site generator written in Go with extremely fast build times (~1 ms per page). Content is written in markdown with front matter. Hugo then takes the source directory with content and templates and renders them into a full html website.&lt;/p&gt;&lt;p&gt;Below is a quick start introduction to Hugo to get your own blog up and running in less than 30 minutes.&lt;/p&gt;&lt;p&gt;The first thing that you need to do is install Hugo on your machine.&lt;/p&gt;&lt;p&gt;If you are on a Linux or Mac, you can use &lt;a href=&#34;https://brew.sh/&#34;&gt;Brew&lt;/a&gt; to install Hugo. For more options, see the official install docs &lt;a href=&#34;https://gohugo.io/getting-started/installing&#34;&gt;here&lt;/a&gt;. It&amp;rsquo;s also recommended to have &lt;a href=&#34;../05&#34;&gt;Git&lt;/a&gt; installed as well because it will make content management so much easier just like software version control.&lt;/p&gt;&lt;p&gt;To create a new site, simple run the command below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ hugo new site mysite&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a new Hugo site in a folder named &lt;em&gt;mysite&lt;/em&gt;. Navigate into the directory, and initialise a git repository inside it.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cd mysite$ git init&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, you can add a theme to your site. I chose the &lt;em&gt;Kiera&lt;/em&gt; theme for my blog. You can choose any theme that suits your purpose from their collection of hundreds of themes &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;here&lt;/a&gt;. It&amp;rsquo;s recommended to download the theme into your site by using git submodule like below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git submodule add https://github.com/funkydan2/hugo-kiera.git themes/hugo-kiera&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A new &lt;em&gt;.gitmodules&lt;/em&gt; file will be created containing the local path and remote URL of the submodule.&lt;/p&gt;&lt;p&gt;Then, add the theme to the site configuration:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ echo &#39;theme = &amp;quot;hugo-kiera&amp;quot;&#39; &amp;gt;&amp;gt; config.toml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can start creating content by using the hugo new command from the site root like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ hugo new posts/my-first-post.md&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a post by the name &lt;em&gt;my-first-post&lt;/em&gt; in a &lt;em&gt;posts&lt;/em&gt; sub-directory inside the &lt;em&gt;content&lt;/em&gt; directory of the site.&lt;/p&gt;&lt;p&gt;Open the file in a text editor of your choice and start writing. Each new content file starts with some extra information about the post called front matter like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;+++title = &amp;quot;My First Post&amp;quot;date: 2019-03-26T08:47:11+01:00draft: truetags = []categories = []+++&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can start writing directly the contents below the front matter in markdown format as usual.&lt;/p&gt;&lt;p&gt;Once written, set the value of &lt;em&gt;drafts&lt;/em&gt; in your file&amp;rsquo;s front matter to &lt;code&gt;false&lt;/code&gt;, and launch a development server using the command&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ hugo server&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default, this command will not deploy the files which have &lt;em&gt;drafts&lt;/em&gt; as &lt;code&gt;true&lt;/code&gt;. (&lt;a href=&#34;https://gohugo.io/getting-started/usage/#draft-future-and-expired-content&#34;&gt;Read More&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;To deploy draft files, use the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ hugo server -D&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once, you are satisfied with your changes, stop the server, and build your site by simply using the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ hugo&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To build the drafts too, use the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ hugo -D&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Output will be in  the &lt;strong&gt;/public/&lt;/strong&gt; directory by default. You can change it by setting &lt;code&gt;publishDir&lt;/code&gt; to a directory name of your choice in the &lt;em&gt;config&lt;/em&gt; file. You may then deploy your site by copying the &lt;strong&gt;public/&lt;/strong&gt; directory to your production web server.&lt;/p&gt;&lt;p&gt;Now, to deploy this site using Github pages, simply create a repository of the name &lt;code&gt;username.github.io&lt;/code&gt; where &lt;em&gt;username&lt;/em&gt; is your Github account ID. It&amp;rsquo;s necessary to create the repo of that name because Github gives you a free website using your uniquie ID on the &lt;strong&gt;github.io&lt;/strong&gt; domain.&lt;/p&gt;&lt;p&gt;Clone the repository on your computer and add the contents of your site&amp;rsquo;s public directory into this new repo. Finally, commit and push. Your site should be live in a few minutes on your unique &lt;em&gt;github.io&lt;/em&gt; domain.&lt;/p&gt;&lt;p&gt;Before committing and pushing your &lt;strong&gt;mysite&lt;/strong&gt; repo to Github, first delete your public directory and add your &lt;em&gt;username.github.io&lt;/em&gt; repo as a submodule with the directory name &lt;strong&gt;public&lt;/strong&gt; like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ rm -r public/git submodule add &amp;lt;Remote location of your username.github.io repo&amp;gt; public/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It may happen sometimes, that a git directory for &amp;lsquo;public&amp;rsquo; is found locally with the above remote. If you want to reuse this local git directory instead of cloning again from the remote,use the &amp;lsquo;&amp;ndash;force&amp;rsquo; option.&lt;/p&gt;&lt;p&gt;Now, every time you add new content to the site and build it, your &lt;em&gt;public&lt;/em&gt; directory will be updated. You can navigate inside the public directory and update your &lt;strong&gt;username.github.io&lt;/strong&gt; remote repository.&lt;/p&gt;&lt;p&gt;Once updated, navigate back to the &lt;strong&gt;mysite&lt;/strong&gt; root, and update its remote repository without pushing the contents of your theme or public directory. Instead, only a refernce to specific commits are added.(&lt;a href=&#34;https://github.com/adbose/personal-website&#34;&gt;See example&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;That&amp;rsquo;s pretty much it. You should have a workflow set up to publish and maintain a static site or blog powered by Hugo. You can do some customizations based on your need. For example, I made a custom static home page for my blog instead of using the default list page view of the hugo site by adding a new post called &lt;strong&gt;_index.md&lt;/strong&gt;, and display a list page for posts by adding a &lt;strong&gt;posts.md&lt;/strong&gt; file in the &lt;em&gt;archetypes&lt;/em&gt; directory.&lt;/p&gt;&lt;p&gt;Check out the official &lt;a href=&#34;https://gohugo.io/documentation/&#34;&gt;docs&lt;/a&gt; for more details.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>An Introduction To Git</title>
       <link>https://adybose.github.io/posts/05/</link>
       <pubDate>Sat, 06 Jun 2020 15:34:23 +0530</pubDate>
       
       <guid>https://adybose.github.io/posts/05/</guid>
       <description>&lt;h3 id=&#34;a-primer-on-source-control-using-git&#34;&gt;A primer on source control using Git&lt;/h3&gt;&lt;p&gt;Git is an open source distributed version control system created by Linus Torvalds in 2005 for collaborating with other developers contributing to the Linux kernel.&lt;/p&gt;&lt;p&gt;Although Git is used primarily by programmers for tracking changes in source code during software development, it can be used for tracking changes in any set of files.&lt;/p&gt;&lt;p&gt;This post is a quick introduction to Git, covering the most important commands needed to use Git in your projects.&lt;/p&gt;&lt;p&gt;A Git project will have the following three main sections:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Git directory&lt;/li&gt;&lt;li&gt;Working directory (or working tree)&lt;/li&gt;&lt;li&gt;Staging area&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The &lt;strong&gt;Git directory&lt;/strong&gt; (located in YOUR-PROJECT-PATH/.git/) is where Git stores everything it needs to accurately track the project. This includes metadata and an object database which includes compressed versions of the project files.&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;working directory&lt;/strong&gt; is where a user makes local changes to a project. The working directory pulls the project’s files from the Git directory’s object database and places them on the user’s local machine.&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;staging area&lt;/strong&gt; is a file (also called the “index”, “stage”, or “cache”) that stores information about what will go into your next commit. Staging is therefore the process of adding or removing files to the staging area to be committed. A commit is when you tell Git to save these staged changes. Git takes a snapshot of the files as they are and permanently stores that snapshot in the Git directory.&lt;/p&gt;&lt;h3 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h3&gt;&lt;p&gt;To use Git in your projects, you need to first install it (if not already installed) in your system by following the instructions &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Verify if Git is installed by using the following command in the terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git --version&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, configure your Git environment by setting certain configuration variable using &lt;code&gt;git config&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;There are three levels where these configuration variables are stored:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;System: located in /etc/gitconfig, applies default settings to every user of the computer. To make changes to this file, use the &amp;ndash;system option with the git config command.&lt;/li&gt;&lt;li&gt;User: located in ~/.gitconfig or ~/.config/git/config, applies settings to a single user. To make changes to this file, use the &amp;ndash;global option with the git config command.&lt;/li&gt;&lt;li&gt;Project: located in YOUR-PROJECT-PATH/.git/config, applies settings to the project only. To make changes to this file, use the git config command.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To see all your configuration settings, use the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git config --list&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;initialize-git-in-a-project&#34;&gt;Initialize Git in a Project&lt;/h3&gt;&lt;p&gt;Once Git is installed and configured on your computer, you need to initialize it in your project to start using it for version control.&lt;/p&gt;&lt;p&gt;In the command line, use the &lt;code&gt;cd&lt;/code&gt; command to navigate to the root level directory of your project, and run the command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git init&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This installs a &lt;strong&gt;Git directory&lt;/strong&gt; (&lt;em&gt;.git/&lt;/em&gt; folder with all the files and objects Git needs to track your project.&lt;/p&gt;&lt;h3 id=&#34;adding-and-committing-your-work&#34;&gt;Adding and Committing your work&lt;/h3&gt;&lt;p&gt;Once initialized, Git will start tracking the changes you make within the working directory of your project. You can check the status of your &lt;em&gt;working tree&lt;/em&gt; with the command &lt;code&gt;git status&lt;/code&gt; which shows important details about your project like current branch, and all the changes, staged or unstaged for committing.To add the changes to the staging area, use the &lt;code&gt;git add&lt;/code&gt; command followed by the files and directories to be added for commit.For example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git add file1 file2 dir1/file3 dir2/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once addedd for staging, the changes can be committed with a commit message like below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git commit -m &amp;quot;Initial commit&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;branches&#34;&gt;Branches&lt;/h3&gt;&lt;p&gt;A branch is nothing but a pointer to the latest commit in the Git repository referenced by HEAD. So currently, you are in the &lt;em&gt;master&lt;/em&gt; branch which is a pointer to the commit with the message “Initial commit”. Whenever you make a commit, HEAD is updated with the latest commit.&lt;/p&gt;&lt;p&gt;To work on any new task/issue on a project, it is always advised to create a new branch to avoid breaking the committed state so far.&lt;/p&gt;&lt;p&gt;Create and switch to a new branch using the &lt;code&gt;git checkout&lt;/code&gt; command with the &lt;code&gt;-b&lt;/code&gt; flag. For example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git checkout -b mylocalbranch&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can view all the branches in your repository with the &lt;code&gt;git branch&lt;/code&gt; command, and switch between branches using the &lt;code&gt;git checkout&lt;/code&gt; followed by the branch name.&lt;/p&gt;&lt;p&gt;Once you&amp;rsquo;re done with your changes, you can commit and merge them to the master branch:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;Commit changes to mylocalbranch&amp;quot;git checkout mastergit merge mylocalbranch&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After this, you can safely delete that branch with the &lt;code&gt;git branch&lt;/code&gt; command along with the &lt;code&gt;-D&lt;/code&gt; flag like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git branch -D mylocalbranch&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can run &lt;code&gt;git log&lt;/code&gt; to see the commit history of your repository.&lt;/p&gt;&lt;h3 id=&#34;working-with-remotes&#34;&gt;Working with Remotes&lt;/h3&gt;&lt;p&gt;When working on a collaborative project, each collaborator works on a local copy of the project that sits on a remote repository, and periodically updates the remote with their local changes.&lt;/p&gt;&lt;p&gt;For that, we use a hosted Git service, a popular one being &lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You can start working on a local copy of an existing remote repository using the &lt;code&gt;git clone&lt;/code&gt; command with the URL of the remote repository as argument or create a new remote repository and set it to track your local repository using the &lt;code&gt;git remote add&lt;/code&gt; command with name you want to give to the remote (eg. &lt;em&gt;remote&lt;/em&gt;) followed by the URL of the remote repository as argument.&lt;/p&gt;&lt;p&gt;To incorporate the changes from the remote into your local repository, use the &lt;code&gt;git pull&lt;/code&gt; command which is the same as a &lt;code&gt;git fetch&lt;/code&gt; followed by a &lt;code&gt;git merge&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;To update the remote with your saved or committed local changes, use the &lt;code&gt;git push&lt;/code&gt; command.&lt;/p&gt;&lt;p&gt;Below is a visualization of a basic Git workflow:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adbose/assets/master/git_overview.png&#34; alt=&#34;Git Overview&#34;&gt;&lt;/p&gt;&lt;p&gt;That&amp;rsquo;s pretty much all the fundamentals needed to get started with Git. For a list of some of the most commonly used Git commands, please refer to this &lt;a href=&#34;https://gist.github.com/adbose/e24ba1754cce1a02e2cfd807d7a06e9c&#34;&gt;Gist&lt;/a&gt;. I shall try to post some updates in future posts covering some advanced workflows in Git like resolving merge conflicts, resetting or reverting changes, rebasing, working with submodules, etc.&lt;/p&gt;&lt;p&gt;See you in another one!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Covid-19 Stats Tweeter</title>
       <link>https://adybose.github.io/posts/04/</link>
       <pubDate>Sat, 16 May 2020 13:56:48 +0530</pubDate>
       
       <guid>https://adybose.github.io/posts/04/</guid>
       <description>&lt;p&gt;So I finally got developer account access from Twitter which I had applied for last &lt;a href=&#34;../01&#34;&gt;month&lt;/a&gt; to post automated coronavirus updates.In this part, we will look at the process of creating an app, and developing the code to post tweets programmatically.&lt;/p&gt;&lt;p&gt;We are going to use Python3 as our programming language and use the &lt;code&gt;tweepy&lt;/code&gt; python library to access Twitter&amp;rsquo;s APIs along with &lt;code&gt;lxml&lt;/code&gt; package to parse the Worldometers site for data. We need to install these dependencies in a new python virtual environment, and activate it to start developing.&lt;/p&gt;&lt;p&gt;First, we go to the &lt;a href=&#34;https://developer.twitter.com/en/apps&#34;&gt;apps page&lt;/a&gt; and create an app. We give an app name, add a description and a website url. dd description and a website url. At the bottom, we need to describe briefly how we are going to use the app, and press create.&lt;/p&gt;&lt;p&gt;Once created, go to the &lt;em&gt;Keys and Tokens&lt;/em&gt; tab, and generate Access Token and Access Token Secret, and copy them along with the consumer API keys in a python file called &lt;em&gt;config.py&lt;/em&gt; as below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;CONSUMER_KEY = &#39;&amp;lt;API key&amp;gt;&#39;CONSUMER_SECRET = &#39;&amp;lt;API secret key&amp;gt;&#39;ACCESS_TOKEN = &#39;&amp;lt;Access token&amp;gt;&#39;ACCESS_TOKEN_SECRET = &#39;&amp;lt;Access token secret&amp;gt;&#39;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the same folder as &lt;em&gt;config.py&lt;/em&gt;, create another python file called &lt;em&gt;app.py&lt;/em&gt; and import the tweepy module, the keys from config and authenticate the app as below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)auth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, create an API object and verify the access credentials as below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;api = tweepy.API(auth)api.verify_credentials()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are now ready to compose our tweet and post it to Twitter.&lt;/p&gt;&lt;p&gt;We use the &lt;code&gt;requests&lt;/code&gt; library to fetch the data for our tweet from Worldometers, parse it using &lt;code&gt;xpath&lt;/code&gt; and save it in a variable called &lt;em&gt;tweet&lt;/em&gt;. We can then post our tweet using a single line of code as below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;api.update_status(tweet)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To post the tweet, simply run the &lt;em&gt;app.py&lt;/em&gt; from the console with the command&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ python app.py&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We now have a basic Twitter bot ready, and can post tweets whenever we run our script. Feel free to checkout the code on &lt;a href=&#34;https://github.com/adbose/covid-tweeter&#34;&gt;Github&lt;/a&gt; and send PRs to improve this bot.&lt;/p&gt;&lt;p&gt;Also, follow the bot &lt;a href=&#34;https://twitter.com/covidtrackerbot&#34;&gt;@covidtrackerbot&lt;/a&gt; on Twitter, and press the bell icon to get notified whenever there is a new tweet.&lt;/p&gt;&lt;p&gt;Our next steps would be to host it online and add more functionality like tweeting periodically from an infinite loop, or tweeting country-wise stats as they are updated on Worldometer.&lt;/p&gt;&lt;p&gt;Stay tuned for further updates!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Twilio Hackathon 2020</title>
       <link>https://adybose.github.io/posts/03/</link>
       <pubDate>Sat, 09 May 2020 20:47:09 +0530</pubDate>
       
       <guid>https://adybose.github.io/posts/03/</guid>
       <description>&lt;p&gt;Over the past month, I have been hacking around with the Twilio API for WhatsApp to create some simple bots by following their documentation and tutorials.&lt;/p&gt;&lt;p&gt;Twilio was hosting a hackathon throughout April on &lt;a href=&#34;https://dev.to/devteam/announcing-the-twilio-hackathon-on-dev-2lh8&#34;&gt;Dev&lt;/a&gt; to solve challenges in communication, and one of the themes was the ongoing Coronavirus pandemic.This seemed like a good opportunity to test out my ideas for a Covid Tracker as a WhatsApp bot.&lt;/p&gt;&lt;p&gt;We have already seen how we can import twilio to a python script to use it&amp;rsquo;s APIs to send messages to users.&lt;/p&gt;&lt;p&gt;In this project, we would create a Flask app and use Twilio&amp;rsquo;s &lt;code&gt;twiml&lt;/code&gt; APIs to send meaningful information based on user queries.&lt;/p&gt;&lt;p&gt;Our original intent from the &lt;a href=&#34;../01&#34;&gt;first&lt;/a&gt; post was to be able to get notified on the latest Covid-19 case stats. The easy solution that I wanted to implement was a Twitter bot that tweets every time it receives updated stats from it&amp;rsquo;s trusted data sources. Since I have yet not recevied Developer access for Twitter, I deceided to implement an information system related to Covid-19 over WhatsApp. It is not free to send self initiated messages, and to be able to send such messages, one needs to apply for a Business Account with WhatsApp which again goes through an approval process which again takes several weeks. We are gonna worry about all that later, and start building and testing right away using the Twilio Sandbox for WhatsApp.&lt;/p&gt;&lt;p&gt;My main objective for the Hackathon was to show daily and total Covid-19 cases in India. Using the location services of WhatsApp, we could also get nearby case statistics andn essential services information for users to have an idea of the neighbourhood they are in.&lt;/p&gt;&lt;p&gt;The project is developed using Python3.8 with the Flask web microframework, and uses Twilio&amp;rsquo;s Programmable SMS API for WhatsApp. Let us start by first installing &lt;code&gt;flask&lt;/code&gt; and &lt;code&gt;twilio&lt;/code&gt; in a new virtual environment, after which we can start developing by importing these dependencies in our code.&lt;/p&gt;&lt;p&gt;The next step is to source the data. For country level and total global Covid-19 stats, Worldometers is probably the most popular site on the Internet. They have paid licences starting $35/month to access their data APIs, but I didn&amp;rsquo;t wish to pay any money to get started with the project which is mainly an experimental one for educational purposes. So, using an open source MIT licence for fair and non-commercial use, I assumed I could safely scrape the publicly available data from their site and get all the country level stats at a given moment.&lt;/p&gt;&lt;p&gt;Given below is a script that we could write to fetch the current stats from Worldometers on the global cases, deaths and recoveries:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;response = requests.get(&#39;https://www.worldometers.info/coronavirus/&#39;)doc = html.fromstring(response.content)country_names = doc.xpath(    &#39;//table[@id=&amp;quot;main_table_countries_today&amp;quot;]/tbody/tr/td[2]/a[contains(@href, &amp;quot;country/&amp;quot;)]/text()&#39;)print(country_names)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result will be a list of names of countries as they are written in the Worldometers site in the main stats table.To scrape the website more reliably, I decided to use the &lt;code&gt;lxml&lt;/code&gt; Python package to parse the site XML using &lt;code&gt;xpath&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Luckily, getting India specific data is easier. The site &lt;a href=&#34;covid19india.org&#34;&gt;covid19india.org&lt;/a&gt; provides a free and open JSON API which we can access using simple HTTP GET requests to get state level, district level, patient level, and overall stats. The data is crowdsourced and maintained by the volunteers involved with the project. Check out the API information page &lt;a href=&#34;https://api.covid19india.org/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We use the &lt;code&gt;requests&lt;/code&gt; Python package and Python&amp;rsquo;s inbuild &lt;code&gt;json&lt;/code&gt; module to send a request to an API and get response in a Python data type which will be the JSON equivalent of the data like a &lt;em&gt;dict&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;A typical request and response code would look something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;response = requests.get(api_url)return response.json()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When users send their location in their message, we obtain the location coordinates from the &lt;code&gt;request.values&lt;/code&gt; object of the request payload that WhatsApp receives. To encode and decode locations and places, we can use a third party geolocation service like Google Maps API. For the purposes of the hackathon, I used the free and public &lt;a href=&#34;https://nominatim.org/&#34;&gt;Nominatim Open Street Map API&lt;/a&gt; from the &lt;code&gt;geopy&lt;/code&gt; Python package.Using the location data, we were able to provide case stats by district, zone information, as well as essential services available nearby.&lt;/p&gt;&lt;h3 id=&#34;using-the-bot&#34;&gt;Using The Bot&lt;/h3&gt;&lt;p&gt;The app is hosted for free on &lt;a href=&#34;https://heroku.com&#34;&gt;Heroku&lt;/a&gt;. You can start interacting with the bot right now by sending the message &lt;code&gt;join came-told&lt;/code&gt; to Twilio&amp;rsquo;s shared WhatsApp number.&lt;/p&gt;&lt;p&gt;You can find the code for the project on &lt;a href=&#34;https://github.com/adbose/covid-india-whatsapp-tracker&#34;&gt;Github&lt;/a&gt; along with the instructions to clone and run it locally with the Twilio Sandbox for WhatsApp using &lt;code&gt;ngrok&lt;/code&gt; to expose the local instance of your app to Twilio&amp;rsquo;s webhook endpoint URL.You can also read my submission post on &lt;a href=&#34;https://dev.to/adbose/twilio-hackathon-submission-a-location-based-covid-19-whatsapp-tracker-for-india-1oi3&#34;&gt;dev.to&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Stay tuned for more updates on this project!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>WhatsApp</title>
       <link>https://adybose.github.io/posts/02/</link>
       <pubDate>Fri, 17 Apr 2020 02:29:14 +0530</pubDate>
       
       <guid>https://adybose.github.io/posts/02/</guid>
       <description>&lt;p&gt;Last week, I decided to build a Twitter bot to tweet out the latest Covid-19 cases and news tracked by &lt;a href=&#34;https://www.worldometers.info/coronavirus/&#34;&gt;Worldometers&lt;/a&gt; and &lt;a href=&#34;https://www.covid19india.org&#34;&gt;India Covid-19 Tracker&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;While waiting for my developer account request to get approved by Twitter (which is taking rather longer than usual), I started looking into some other platforms where I could start developing right away.&lt;/p&gt;&lt;p&gt;One such platform is WhatsApp, which for being the most popular messaging application in the world, is rapidly gaining interest among businesses to connect with their customers using the WhatsApp Business API.Usually, WhatsApp takes several weeks for approving a WhatsApp Business account if applied directly. But with one of it&amp;rsquo;s official service providers like Twilio, it could take only about a couple of weeks.&lt;/p&gt;&lt;p&gt;Let us explore the Twilio API for WhatsApp to start interacting with WhatsApp programmatically.&lt;/p&gt;&lt;p&gt;The first step is to create a free Twilio account. All new users get a $15 bonus trial credit on signup to test out their platform.To start using the Twilio API for WhatsApp in production, we will need to purchase a number from Twilio and apply for a WhatsApp Business profile.We are going to skip this step for now and directly start developing our application, and test it out using the Sandbox in the console.&lt;/p&gt;&lt;p&gt;I will be using Python3 on my local development machine running Linux.&lt;/p&gt;&lt;p&gt;First, we need to copy the Accound SID and Auth Token from the Twilio console, and use them to set our environment variables that will allow our Python script to access our Twilio account and use the API.&lt;/p&gt;&lt;p&gt;From the terminal, run the export command to set our environment variables named &lt;strong&gt;TWILIO_ACCOUNT_SID&lt;/strong&gt; and &lt;strong&gt;TWILIO_AUTH_TOKEN&lt;/strong&gt;, as shown below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ export TWILIO_ACCOUNT_SID=&#39;&amp;lt;your twilio account sid&amp;gt;&#39;$ export TWILIO_AUTH_TOKEN=&#39;&amp;lt;your twilio authentication token&amp;gt;&#39;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With our environment variables now set, we are ready to write our Python script and test it out. But first, we are going to create a new directory for our project. We are going to call it &lt;strong&gt;whatsapp-test-bot&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;From the terminal, run the command below to create our directory:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ mkdir whatsapp-test-bot&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we are going to create a new virtual environment to keep our dependencies isolated from other projects.Navigate to our newly created directory, and create a new virtual environment using the command below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ python3 -m venv whatsapp_test_env&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or, if you have the virtualenv python package installed, run&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ virtualenv whatsapp_test_env&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After creating the virtual environment, activate it using the command below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ source ./whatsapp_test_env/bin/activate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, install the Twilio Python helper library into the virtual environment:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ pip install twilio&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, create a file named &lt;strong&gt;app.py&lt;/strong&gt; and add the following code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;from twilio.rest import Client# client credentials are read from TWILIO_ACCOUNT_SID and AUTH_TOKENclient = Client()# this is the Twilio sandbox testing numberfrom_whatsapp_number=&#39;whatsapp:+14155238886&#39;# add your own WhatsApp Messaging number hereto_whatsapp_number=&#39;whatsapp:+xxxxxxxxxxx&#39;client.messages.create(body=&#39;Hello, world!&#39;,                       from_=from_whatsapp_number,                       to=to_whatsapp_number)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above code imports the Twilio Python helper library, instantiates the helper library client, sets a from and to WhatsApp number, and then sends a single message with the &lt;code&gt;client.messages.create()&lt;/code&gt; function call.&lt;/p&gt;&lt;p&gt;Our Python script is now ready, and we just need to activate the WhatsApp sandbox from the Twilio console to test it out.&lt;/p&gt;&lt;p&gt;From the WhatsApp &lt;a href=&#34;https://www.twilio.com/console/sms/whatsapp/learn&#34;&gt;page&lt;/a&gt; in the Twilio Console, note the default sandbox number provided by Twilio and the sandbox keyword.Open WhatsApp on your device, and send &lt;code&gt;join &amp;lt;your sandbox keyword&amp;gt;&lt;/code&gt; to the sandbox number to connect to it. You should receive a reply from the number confirming that you have been connected to the sandbox.&lt;/p&gt;&lt;p&gt;That&amp;rsquo;s it! With the virtual environment activated, and the environment variables set, you are now ready to receive messages sent by your app from the sandbox you have connected to.To disconnect from the sandbox, simply send &lt;code&gt;stop&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In the next part of this story, we will go beyond the basics, and look at the process of actually building a chatbot that would scrape Worldometers for the latest data on Coronavirus, and respond to user queries with accurate results from the website.&lt;/p&gt;&lt;p&gt;See you in the next one!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Isolation</title>
       <link>https://adybose.github.io/posts/01/</link>
       <pubDate>Thu, 09 Apr 2020 02:29:14 +0530</pubDate>
       
       <guid>https://adybose.github.io/posts/01/</guid>
       <description>&lt;p&gt;It has been 100 days of Coronavirus today.&lt;/p&gt;&lt;p&gt;On the last day of 2019, China announced it had detected a “pneumonia of unknown cause” in  Wuhan, the capital city of China&amp;rsquo;s Hubei province.It was the first time the world got a notice of what was about to hit.One hundred days later, the novel Coronavirus disease has spread to almost every country and has resulted in billions of people now living under lockdown.&lt;/p&gt;&lt;p&gt;The Coronavirus disease 2019 (COVID-19) is an infectious disease caused by the Severe Acute Respiratory Syndrome Coronavirus 2 (SARS-CoV-2). Since the first mention of it appearing in Wuhan, it has spread now all over the globe, resulting in the ongoing 2019–20 coronavirus pandemic.&lt;/p&gt;&lt;p&gt;So far, over a million people have been infected, close to a hundred thousand people have lost their lives, and the disease is still spreading exponentially.Schools, universities, workplaces and businesses are shut down, people are losing their jobs, and the whole world is slowly falling into to an economic recession.&lt;/p&gt;&lt;p&gt;While I am trying my best to stay productive and positive in my daily life working from home, I often find myself getting distracted by the urge to check for the latest news and stories on the current pandemic situation, or checking out sites like &lt;a href=&#34;https://www.covid19india.org&#34;&gt;India Covid-19 Tracker&lt;/a&gt;, &lt;a href=&#34;https://www.worldometers.info/coronavirus/&#34;&gt;Worldometers Coronavirus&lt;/a&gt;, etc. to get the latest statistics on Coronavirus cases.These sites do a great job of presenting a lot of insightful information compiled from official sources.But it would have been nicer if one could also get notified whenever new data gets updated on these sites, so that one doesn&amp;rsquo;t have to keep checking them back regularly.&lt;/p&gt;&lt;p&gt;The solution is simple. I need to create a script that scrapes these sites for the latest data on coronavirus cases, and find a way to send those updates to me so that I won&amp;rsquo;t have to manually check them time and again.If we can build a &lt;a href=&#34;https://twitter.com&#34;&gt;Twitter&lt;/a&gt; bot which would run that script at regular intervals to tweet out the stats whenever new data arrives, other people too can make use of this feature by subscribing to that Twitter handle.&lt;/p&gt;&lt;p&gt;Twitter provides an &lt;a href=&#34;https://developer.twitter.com&#34;&gt;API&lt;/a&gt; through which users can interact with their platform programmatically.The first step is to create a Twitter account, and &lt;em&gt;&lt;a href=&#34;https://developer.twitter.com/en/apply-for-access&#34;&gt;Apply for a developer account&lt;/a&gt;&lt;/em&gt; on the developer page.After answering out some basic questionnaire, submit it for review to Twitter, which may take a couple of days.Once the verification is complete, we can go ahead and create the app and start developing the code for the bot.&lt;/p&gt;&lt;p&gt;In the next part of this story, we will look into the process of actually developing the bot and hosting it online so that it works round the clock tweeting out the latest stats on Covid cases.&lt;/p&gt;&lt;p&gt;Stay tuned!&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
